{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst BASE_URL = 'http://localhost:8080/api/';\nlet UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'http://localhost:8080/api/user';\n    }\n    // Existing methods for fetching content based on roles\n    getPublicContent() {\n      return this.http.get(BASE_URL + 'test/all', {\n        responseType: 'text'\n      });\n    }\n    getProjectsForCurrentUser() {\n      const token = localStorage.getItem('token'); // Récupérer le token JWT\n      //const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n      return this.http.get(BASE_URL + 'test/my-projects', {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        })\n      });\n    }\n    getUserBoard() {\n      return this.http.get(BASE_URL + 'test/user', {\n        responseType: 'text'\n      });\n    }\n    getModeratorBoard() {\n      return this.http.get(BASE_URL + 'test/mod', {\n        responseType: 'text'\n      });\n    }\n    getModerators() {\n      return this.http.get(this.baseUrl + '/moderators');\n    }\n    getAdminBoard() {\n      return this.http.get(BASE_URL + 'test/admin', {\n        responseType: 'text'\n      });\n    }\n    // Methods for user management\n    getAllUsers() {\n      return this.http.get(BASE_URL + 'user/list');\n    }\n    getAllProjects() {\n      return this.http.get(BASE_URL + 'user/listProjects');\n    }\n    // Angular service to update user roles\n    updateUserRoles(userId, roles) {\n      return this.http.put(`${this.baseUrl}/${userId}/roles`, {\n        roles\n      });\n    }\n    // Angular service to add a user\n    addUser(user) {\n      return this.http.post(`${this.baseUrl}/add`, user);\n    }\n    updateUser(id, user) {\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      return this.http.put(`${this.baseUrl}/update/${id}`, JSON.stringify(user), {\n        headers\n      });\n    }\n    deleteUser(userId) {\n      return this.http.delete(`${this.baseUrl}/${userId}`);\n    }\n    addProject(projet) {\n      return this.http.post(BASE_URL + 'user/addPoject', projet, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      });\n    }\n    updateProject(id, projet) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      return this.http.put(`${BASE_URL}user/updateProject/${id}`, projet, {\n        headers\n      });\n    }\n    deleteProject(projectId) {\n      return this.http.delete(`${BASE_URL}user/delete/${projectId}`);\n    }\n    static #_ = this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();\nexport { UserService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}