{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MessageService } from 'primeng/api'; // Pour les messages/toasts\nlet AssignProjectsComponent = class AssignProjectsComponent {\n  constructor(projectAssignmentService, userService, router, messageService // Pour les messages/toasts\n  ) {\n    this.projectAssignmentService = projectAssignmentService;\n    this.userService = userService;\n    this.router = router;\n    this.messageService = messageService;\n    // Propriétés pour stocker les utilisateurs, projets, et autres données\n    this.users = [];\n    this.projects = [];\n    this.selectedProjectIds = [];\n    this.toastMessage = ''; // Pour afficher des messages toast\n    this.allAssignments = [];\n    this.project = {};\n  }\n  ngOnInit() {\n    // Charger les utilisateurs et gérer les erreurs\n    this.userService.getAllUsers().subscribe(response => {\n      this.users = response;\n    }, error => {\n      this.showError('Error fetching users', 'Please try again later.');\n    });\n    // Charger les projets et gérer les erreurs\n    this.userService.getAllProjects().subscribe(response => {\n      this.projects = response;\n    }, error => {\n      this.showError('Error fetching projects', 'Please try again later.');\n    });\n    this.loadAssignments();\n  }\n  assignProjects() {\n    console.log(\"Assigning projects:\", this.selectedUserId, this.selectedProjectIds, this.startDate, this.endDate); // Log les données avant l'envoi\n    this.projectAssignmentService.assignProjectsToUser(this.selectedUserId, this.selectedProjectIds, this.startDate, this.endDate).subscribe({\n      next: response => {\n        this.showSuccess(\"Projects assigned successfully!\");\n        this.router.navigate(['/affectation']);\n        this.loadAssignments();\n      },\n      error: error => {\n        console.error(\"Assign Projects Error:\", error); // Log l'erreur pour déboguer\n        this.showError('Error assigning projects', 'Please try again later.');\n      }\n    });\n  }\n  loadAssignments() {\n    this.projectAssignmentService.getAllAssignedProjects().subscribe(assignments => {\n      console.log(\"Loaded assignments:\", assignments); // Vérifiez ici si les objets contiennent des id\n      this.allAssignments = assignments;\n    }, error => {\n      console.error(\"Error loading assignments:\", error);\n    });\n  }\n  // Afficher un message toast de succès\n  showSuccess(message) {\n    this.messageService.add({\n      severity: 'success',\n      summary: 'Success',\n      detail: message\n    });\n  }\n  // Afficher un message toast d'erreur\n  showError(summary, detail) {\n    this.messageService.add({\n      severity: 'error',\n      summary,\n      detail\n    });\n  }\n  isFormValid() {\n    return this.selectedUserId !== undefined && this.selectedProjectIds.length > 0 && this.startDate !== undefined && this.endDate !== undefined; // Ajoutez des vérifications pour des valeurs valides\n  }\n  // Méthode pour supprimer un projet assigné\n  deleteAssignment(assignment) {\n    console.log(\"Assignment ID:\", assignment.projectName); // Vérifiez si l'identifiant est bien défini\n    if (assignment.id && confirm(\"Are you sure you want to delete assignment with ID: \" + assignment.id + \"?\")) {\n      this.projectAssignmentService.deleteAssignment(assignment.id).subscribe(response => {\n        console.log(\"Assignment deleted successfully\");\n        this.loadAssignments(); // Rechargez les assignments\n      }, error => {\n        console.error(\"Error deleting assignment:\", error);\n      });\n    } else {\n      console.error(\"Assignment ID is undefined, cannot delete.\");\n    }\n  }\n  updateAssignment(assignment) {\n    const updatedAssignment = {\n      projectId: assignment.projectId,\n      userId: assignment.userId,\n      startDate: assignment.startDate,\n      endDate: assignment.endDate\n    };\n    this.projectAssignmentService.updateAssignment(assignment.id, updatedAssignment).subscribe({\n      next: response => {\n        console.log(\"Assignment updated successfully!\");\n        this.loadAssignments();\n      },\n      error: error => {\n        if (error.status === 404) {\n          console.error(\"Assignment not found. Check if the assignment ID is correct.\");\n        } else {\n          console.error(\"Error updating assignment:\", error);\n        }\n      }\n    });\n  }\n};\nAssignProjectsComponent = __decorate([Component({\n  selector: 'app-assign-projects',\n  templateUrl: './assign-projects.component.html',\n  styleUrls: ['./assign-projects.component.css'],\n  providers: [MessageService] // Inclure le service pour afficher des messages\n})], AssignProjectsComponent);\nexport { AssignProjectsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}