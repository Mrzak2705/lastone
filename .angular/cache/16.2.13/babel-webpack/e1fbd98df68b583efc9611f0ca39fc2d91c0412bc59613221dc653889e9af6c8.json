{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { ProjetRequest } from 'src/app/_services/models/projet-request';\nlet ProjectsComponent = class ProjectsComponent {\n  constructor(userService, projectAssignmentService) {\n    this.userService = userService;\n    this.projectAssignmentService = projectAssignmentService;\n    this.users = [];\n    this.allRoles = ['ROLE_USER', 'ROLE_MODERATOR', 'ROLE_ADMIN']; // Define all possible roles\n    this.moderators = [];\n    //projetassign: any[] = [];\n    this.nomProjet = '';\n    this.codeProjet = '';\n    this.projects = [];\n    this.project = {};\n    this.projectAssignments = [];\n    this.selectedRole = ''; // Définir la propriété selectedRole\n  }\n\n  addProject() {\n    const projetRequest = new ProjetRequest(this.nomProjet, this.codeProjet);\n    this.userService.addProject(projetRequest).subscribe(response => {\n      console.log('Project added successfully:', response);\n      this.fetchProjects();\n    }, error => {\n      console.error('Error adding project:', error);\n    });\n  }\n  ngOnInit() {\n    /*this.userService.getAllUsers().subscribe(\n      (data) => {\n        this.users = data;\n        console.log('Users loaded:', this.users); // Afficher les utilisateurs pour vérifier les IDs\n      },\n      (error) => {\n        console.error('Error loading users:', error);\n      }\n    );\n    this.project = {};\n         this.userService.getAllProjects().subscribe(\n      (dataa) => {\n        this.projects = dataa;\n        console.log('Projects loaded:', this.projects); // Afficher les projets pour vérifier les IDs\n      },\n      (error) => {\n        console.error('Error loading Projects:', error);\n      }\n    );*/\n    this.fetchUsers();\n    this.fetchModerators();\n    this.fetchProjects();\n    this.fetchProjectAssignments();\n  }\n  fetchProjectAssignments() {\n    if (this.userId) {\n      this.projectAssignmentService.getAssignedProjects(this.userId).subscribe(projects => {\n        this.projects = projects; // Assignation des données au modèle\n        console.log('Projects assign loaded:', this.projects);\n      }, error => {\n        console.error('Error loading projects assign:', error);\n      });\n    }\n  }\n  fetchProjects() {\n    this.userService.getAllProjects().subscribe(data => {\n      this.projects = data;\n      console.log('Projects loaded:', this.projects);\n    }, error => {\n      console.error('Error loading projects:', error);\n    });\n  }\n  /*fetchProjectAssignments() {\n    this.projectAssignmentService.getAllProjectsAssignment().subscribe(\n      data => {\n        this.projetassign = data;\n      },\n      error => {\n        console.error('Error loading project assignments:', error);\n      }\n    );\n  }*/\n  fetchModerators() {\n    this.userService.getModerators().subscribe(data => {\n      this.moderators = data;\n    }, error => {\n      console.error('Error loading moderators:', error);\n    });\n  }\n  fetchUsers() {\n    this.userService.getAllUsers().subscribe(data => {\n      this.users = data;\n      console.log('Users loaded:', this.users);\n    }, error => {\n      console.error('Error loading users:', error);\n    });\n  }\n  /*updateUserRoles(user): void {\n    console.log('Updating roles for user:', user);\n    // Fichier: src/app/board-admin/admin-board.component.ts\n  this.userService.updateUserRoles(user.id, user.roles).subscribe(\n  response => {\n    console.log('Roles updated', response);\n  },\n  error => {\n    console.error('Error updating roles', error);\n  }\n  );\n     }*/\n  updateRole(user, newRole) {\n    // Vous pouvez ajuster cette méthode pour appeler un service qui met à jour le rôle de l'utilisateur dans la base de données\n    user.roles = [newRole]; // Supposons que chaque utilisateur a un seul rôle pour simplifier\n    this.userService.updateUserRoles(user.id, user.roles).subscribe(response => {\n      console.log('Roles updated successfully');\n      // Vous pouvez choisir de recharger les données ou de confirmer visuellement la mise à jour ici\n    }, error => {\n      console.error('Error updating roles:', error);\n    });\n  }\n  updateUser(user) {\n    const userPayload = {\n      username: user.username,\n      email: user.email,\n      password: user.password,\n      roles: user.roles.map(role => ({\n        name: role\n      }))\n    };\n    this.userService.updateUser(user.id, userPayload).subscribe(response => {\n      console.log('User updated successfully', response);\n      this.fetchUsers(); // Rafraîchir la liste des utilisateurs\n    }, error => {\n      console.error('Error updating user:', error);\n    });\n  }\n  updateProject(project) {\n    const projetPayload = {\n      nomProjet: project.nomProjet,\n      codeProjet: project.codeProjet\n    };\n    this.userService.updateProject(project.id, projetPayload).subscribe(response => {\n      console.log('Project updated successfully', response);\n      this.fetchUsers(); // Rafraîchir la liste des utilisateurs\n    }, error => {\n      console.error('Error updating project:', error);\n    });\n  }\n  addUser(newUser) {\n    // Ajouter la logique pour associer le modérateur si le rôle 'ROLE_USER' est sélectionné\n    if (this.selectedRole === 'ROLE_USER' && this.selectedModeratorId) {\n      newUser.moderatorId = this.selectedModeratorId;\n    }\n    newUser.role = [this.selectedRole]; // Assurez-vous que le rôle est envoyé sous forme de tableau\n    this.userService.addUser(newUser).subscribe(response => {\n      console.log('User added successfully:', response);\n      this.fetchUsers(); // Refresh the users list\n    }, error => {\n      console.error('Error adding user:', error);\n    });\n  }\n  deleteUser(user) {\n    if (confirm(\"Are you sure to delete \" + user.username + \"?\")) {\n      this.userService.deleteUser(user.id).subscribe(response => {\n        console.log(\"User deleted successfully\", response);\n        this.fetchUsers(); // Refresh the list\n      }, error => {\n        console.error('Error deleting user:', error);\n      });\n    }\n  }\n  deleteProject(project) {\n    if (confirm(\"Are you sure to delete \" + project.codeProjet + \"?\")) {\n      this.userService.deleteProject(project.id).subscribe(response => {\n        console.log(\"Project deleted successfully\", response);\n        this.fetchProjects(); // Actualiser la liste après la suppression\n      }, error => {\n        console.error('Error deleting project:', error);\n      });\n    }\n  }\n};\n__decorate([Input()], ProjectsComponent.prototype, \"userId\", void 0);\nProjectsComponent = __decorate([Component({\n  selector: 'app-projects',\n  templateUrl: './projects.component.html',\n  styleUrls: ['./projects.component.css']\n})], ProjectsComponent);\nexport { ProjectsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}