{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/user.service\";\nlet ProjectManagementComponent = /*#__PURE__*/(() => {\n  class ProjectManagementComponent {\n    constructor(userService) {\n      this.userService = userService;\n      this.projects = [];\n      this.nomProjet = '';\n      this.codeProjet = '';\n    }\n    ngOnInit() {\n      this.fetchProjects();\n    }\n    fetchProjects() {\n      this.userService.getAllProjects().subscribe(data => {\n        this.projects = data;\n        console.log('Projects loaded:', this.projects);\n      }, error => {\n        console.error('Error loading projects:', error);\n      });\n    }\n    addProject() {\n      const projetRequest = {\n        nomProjet: this.nomProjet,\n        codeProjet: this.codeProjet\n      };\n      this.userService.addProject(projetRequest).subscribe(response => {\n        console.log('Project added successfully:', response);\n        this.fetchProjects(); // Refresh the projects list\n      }, error => {\n        console.error('Error adding project:', error);\n      });\n    }\n    updateProject(project) {\n      const projetPayload = {\n        nomProjet: project.nomProjet,\n        codeProjet: project.codeProjet\n      };\n      this.userService.updateProject(project.id, projetPayload).subscribe(response => {\n        console.log('Project updated successfully', response);\n        this.fetchProjects(); // Refresh the projects list\n      }, error => {\n        console.error('Error updating project:', error);\n      });\n    }\n    deleteProject(project) {\n      if (confirm(\"Are you sure to delete \" + project.codeProjet + \"?\")) {\n        this.userService.deleteProject(project.id).subscribe(response => {\n          console.log(\"Project deleted successfully\", response);\n          this.fetchProjects(); // Refresh the projects list after deletion\n        }, error => {\n          console.error('Error deleting project:', error);\n        });\n      }\n    }\n    static #_ = this.ɵfac = function ProjectManagementComponent_Factory(t) {\n      return new (t || ProjectManagementComponent)(i0.ɵɵdirectiveInject(i1.UserService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProjectManagementComponent,\n      selectors: [[\"app-project-management\"]],\n      decls: 2,\n      vars: 0,\n      template: function ProjectManagementComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"project-management works!\");\n          i0.ɵɵelementEnd();\n        }\n      }\n    });\n  }\n  return ProjectManagementComponent;\n})();\nexport { ProjectManagementComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}